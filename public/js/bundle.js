!function n(e,t,o){function i(a,s){if(!t[a]){if(!e[a]){var c="function"==typeof require&&require;if(!s&&c)return c(a,!0);if(r)return r(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var v=t[a]={exports:{}};e[a][0].call(v.exports,function(n){var t=e[a][1][n];return i(t||n)},v,v.exports,n,e,t,o)}return t[a].exports}for(var r="function"==typeof require&&require,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(n,e,t){e.exports=function(n){"string"==typeof n&&(n=[n]);for(var e=[].slice.call(arguments,1),t=[],o=0;o<n.length-1;o++)t.push(n[o],e[o]||"");return t.push(n[o]),t.join("")}},{}],2:[function(n,e,t){!function(n){var t=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,o=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,i=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,r=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),a=function(n,e){return n.test(e)},s=function(n){var e=n||navigator.userAgent,s=e.split("[FBAN");if(void 0!==s[1]&&(e=s[0]),void 0!==(s=e.split("Twitter"))[1]&&(e=s[0]),this.apple={phone:a(/iPhone/i,e),ipod:a(/iPod/i,e),tablet:!a(/iPhone/i,e)&&a(/iPad/i,e),device:a(/iPhone/i,e)||a(/iPod/i,e)||a(/iPad/i,e)},this.amazon={phone:a(o,e),tablet:!a(o,e)&&a(i,e),device:a(o,e)||a(i,e)},this.android={phone:a(o,e)||a(t,e),tablet:!a(o,e)&&!a(t,e)&&(a(i,e)||a(/Android/i,e)),device:a(o,e)||a(i,e)||a(t,e)||a(/Android/i,e)},this.windows={phone:a(/Windows Phone/i,e),tablet:a(/(?=.*\bWindows\b)(?=.*\bARM\b)/i,e),device:a(/Windows Phone/i,e)||a(/(?=.*\bWindows\b)(?=.*\bARM\b)/i,e)},this.other={blackberry:a(/BlackBerry/i,e),blackberry10:a(/BB10/i,e),opera:a(/Opera Mini/i,e),firefox:a(/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,e),chrome:a(/(CriOS|Chrome)(?=.*\bMobile\b)/i,e),device:a(/BlackBerry/i,e)||a(/BB10/i,e)||a(/Opera Mini/i,e)||a(/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,e)||a(/(CriOS|Chrome)(?=.*\bMobile\b)/i,e)},this.seven_inch=a(r,e),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window)return this},c=function(){var n=new s;return n.Class=s,n};void 0!==e&&e.exports&&"undefined"==typeof window?e.exports=s:void 0!==e&&e.exports&&"undefined"!=typeof window?e.exports=c():"function"==typeof define&&define.amd?define("isMobile",[],n.isMobile=c()):n.isMobile=c()}(this)},{}],3:[function(n,e,t){"use strict";function o(n){function e(n){if(n=n||{},Array.isArray(n.colors)){var e=n.colors.map(function(n){return"string"==typeof n||"number"==typeof n?new THREE.Color(n):n});s.uniforms.color1.value.copy(e[0]),s.uniforms.color2.value.copy(e[1])}if("number"==typeof n.aspect&&(s.uniforms.aspect.value=n.aspect),"number"==typeof n.grainScale&&(s.uniforms.grainScale.value=n.grainScale),"number"==typeof n.grainTime&&(s.uniforms.grainTime.value=n.grainTime),n.smooth){var o=t(n.smooth,THREE.Vector2);s.uniforms.smooth.value.copy(o)}if(n.offset){var i=t(n.offset,THREE.Vector2);s.uniforms.offset.value.copy(i)}if("number"==typeof n.noiseAlpha&&(s.uniforms.noiseAlpha.value=n.noiseAlpha),void 0!==n.scale){var r=n.scale;"number"==typeof r&&(r=[r,r]),r=t(r,THREE.Vector2),s.uniforms.scale.value.copy(r)}void 0!==n.aspectCorrection&&(s.uniforms.aspectCorrection.value=Boolean(n.aspectCorrection))}function t(n,e){return Array.isArray(n)?(new e).fromArray(n):n}var o=(n=n||{}).geometry||new THREE.PlaneBufferGeometry(2,2,1),i=window.innerWidth>window.innerHeight?"landscape":"portrait",s=new THREE.RawShaderMaterial({vertexShader:r,fragmentShader:a,side:THREE.DoubleSide,uniforms:{aspectCorrection:{type:"i",value:!1},aspect:{type:"f",value:1},grainScale:{type:"f",value:1e-5},grainTime:{type:"f",value:0},noiseAlpha:{type:"f",value:.3},offset:{type:"v2",value:new THREE.Vector2(0,0)},scale:{type:"v2",value:new THREE.Vector2(1,1)},smooth:{type:"v2",value:new THREE.Vector2(0,"landscape"===i?.5:.9)},color1:{type:"c",value:new THREE.Color("#39abb2")},color2:{type:"c",value:new THREE.Color("#283844")}},depthTest:!1}),c=new THREE.Mesh(o,s);return c.frustumCulled=!1,c.style=e,n&&c.style(n),c}var i=n("glslify"),r=i(["#define GLSLIFY 1\n#define GLSLIFY 1\nattribute vec3 position;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nvarying vec2 vUv;\nvoid main() {\n  gl_Position = vec4(position, 1.0);\n  vUv = vec2(position.x, position.y) * 0.5 + 0.5;\n}"]),a=i(['precision mediump float;\n#define GLSLIFY 1\n#define GLSLIFY 1\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1(vec4 x)\n{\n  return mod289_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289_1(Pi0);\n  Pi1 = mod289_1(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute_1(permute_1(ix) + iy);\n  vec4 ixy0 = permute_1(ixy + iz0);\n  vec4 ixy1 = permute_1(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt_1(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt_1(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_0(vec4 x) {\n     return mod289_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_0(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_0(i);\n  vec4 p = permute_0( permute_0( permute_0(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_0(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame, float multiplier) {\n    vec2 mult = texCoord * resolution;\n    float offset = snoise(vec3(mult / multiplier, frame));\n    float n1 = pnoise(vec3(mult, offset), vec3(1.0/texCoord * resolution, 1.0));\n    return n1 / 2.0 + 0.5;\n}\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame) {\n    return grain(texCoord, resolution, frame, 2.5);\n}\n\nfloat grain(vec2 texCoord, vec2 resolution) {\n    return grain(texCoord, resolution, 0.0);\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n    return mix(\n        sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend), \n        2.0 * base * blend + base * base * (1.0 - 2.0 * blend), \n        step(base, vec3(0.5))\n    );\n}\n\n// Using conditionals\n// vec3 blendSoftLight(vec3 base, vec3 blend) {\n//     return vec3(\n//         ((blend.r < 0.5) ? (2.0 * base.r * blend.r + base.r * base.r * (1.0 - 2.0 * blend.r)) : (sqrt(base.r) * (2.0 * blend.r - 1.0) + 2.0 * base.r * (1.0 - blend.r))),\n//         ((blend.g < 0.5) ? (2.0 * base.g * blend.g + base.g * base.g * (1.0 - 2.0 * blend.g)) : (sqrt(base.g) * (2.0 * blend.g - 1.0) + 2.0 * base.g * (1.0 - blend.g))),\n//         ((blend.b < 0.5) ? (2.0 * base.b * blend.b + base.b * base.b * (1.0 - 2.0 * blend.b)) : (sqrt(base.b) * (2.0 * blend.b - 1.0) + 2.0 * base.b * (1.0 - blend.b)))\n//     );\n// }\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float aspect;\nuniform vec2 offset;\nuniform vec2 scale;\nuniform float noiseAlpha;\nuniform bool aspectCorrection;\nuniform float grainScale;\nuniform float grainTime;\nuniform vec2 smooth;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 q = vec2(vUv - 0.5);\n  if (aspectCorrection) {\n    q.x *= aspect;\n  }\n  q /= scale;\n  q -= offset;\n  float dst = length(q);\n  dst = smoothstep(smooth.x, smooth.y, dst);\n  vec3 color = mix(color1, color2, dst);\n  \n  if (noiseAlpha > 0.0 && grainScale > 0.0) {\n    float gSize = 1.0 / grainScale;\n    float g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);\n    vec3 noiseColor = blendSoftLight(color, vec3(g));\n    gl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);\n  } else {\n    gl_FragColor.rgb = color;\n  }\n  gl_FragColor.a = 1.0;\n}']);e.exports=o},{glslify:1}],4:[function(n,e,t){"use strict";function o(){function n(){setTimeout(function(){j||x(),n()},1e3*N.interval)}document.body.classList.remove("show-loader"),document.body.classList.add("show-ui-btn"),d=new THREE.WebGLRenderer({alpha:!0}),p=new THREE.Scene,(u=new THREE.PerspectiveCamera(60,w/E,1,1e4)).position.z=500,T=new THREE.Vector3,document.body.appendChild(d.domElement),l();var e=O,t=O;P=S(),p.add(P);var o=c(A);(y=new THREE.DataTexture(o,e,t,THREE.RGBAFormat,THREE.FloatType,THREE.DEFAULT_MAPPING,THREE.RepeatWrapping,THREE.RepeatWrapping)).needsUpdate=!0;var i=r(e*t,.66*O);(g=new THREE.DataTexture(i,e,t,THREE.RGBAFormat,THREE.FloatType,THREE.DEFAULT_MAPPING,THREE.RepeatWrapping,THREE.RepeatWrapping)).needsUpdate=!0;var s=a(O,O,"RGBA");(h=new THREE.DataTexture(s,e,t,THREE.RGBAFormat,THREE.FloatType,THREE.DEFAULT_MAPPING,THREE.RepeatWrapping,THREE.RepeatWrapping)).needsUpdate=!0,f=new THREE.ShaderMaterial({uniforms:{textureA:{type:"t",value:y},textureB:{type:"t",value:g},transition:{type:"f",value:N.transition},timer:{type:"f",value:0},frequency:{type:"f",value:N.frequency},amplitude:{type:"f",value:N.amplitude},maxDistance:{type:"f",value:N.maxDistance}},vertexShader:L,fragmentShader:_}),m=new THREE.ShaderMaterial({uniforms:{positionsTexture:{type:"t",value:null},alpha:{type:"f",value:.5},pointSize:{type:"f",value:1}},vertexShader:F,fragmentShader:R,transparent:!0,side:THREE.DoubleSide,blending:THREE.NormalBlending}),FBO.init(e,t,d,f,m),p.add(FBO.particles),l(),v(),b=[y,g,h],z=0,n(),document.addEventListener("mousemove",function(n){var e=n.clientX,t=n.clientY;TweenMax.to(q,.5,{x:e/w*2-1,y:t/E*2-1,ease:"expoOut",overwrite:"all"})}),window.addEventListener("resize",l),d.domElement.addEventListener("click",function(){x(!0)}),document.getElementById("ui-btn").addEventListener("click",function(n){document.body.classList.toggle("show-ui")})}function i(n,e){var t=2*Math.random()*Math.PI,o=2*Math.random()-1,i=Math.random(),r=Math.acos(o),a=e*Math.cbrt(i);return n.x=a*Math.sin(r)*Math.cos(t),n.y=a*Math.sin(r)*Math.sin(t),n.z=a*Math.cos(r),n}function r(n,e){for(var t=4*n,o=new Float32Array(t),r=new THREE.Vector4,a=0;a<t;a+=4)i(r,e),o[a]=r.x,o[a+1]=r.y,o[a+2]=r.z,o[a+3]=1;return o}function a(n,e,t){for(var o="RGBA"===t?4:3,i=e*e,r=n/2,a=new Float32Array(e*e*o),s=0;s<i;s++)a[s*o]=-r+Math.random()*n,a[s*o+1]=-r+Math.random()*n,a[s*o+2]=-r+Math.random()*n,a[s*o+3]=1;return a}function s(){(new THREE.BinaryLoader).load("model/bust.js",function(n){A=n,o()})}function c(n){var e=n.vertices,t=e.length,o=O*O,i=new Float32Array(4*o),r=1.2;console.log(o,t);for(var a=o-t,s=0;s<o;s++)s<a?(i[4*s]=r*e[s].x,i[4*s+1]=r*e[s].y,i[4*s+2]=r*e[s].z,i[4*s+3]=0):(i[4*s]=r*e[s-a].x,i[4*s+1]=r*e[s-a].y,i[4*s+2]=r*e[s-a].z,i[4*s+3]=1);return i}function l(){w=window.innerWidth,E=window.innerHeight,d.setSize(w,E),u.aspect=w/E,u.updateProjectionMatrix()}function v(){if(requestAnimationFrame(v),K.begin(),f.uniforms.transition.value=parseFloat(N.transition),f.uniforms.amplitude.value=parseFloat(N.amplitude),f.uniforms.frequency.value=parseFloat(N.frequency),f.uniforms.maxDistance.value=parseFloat(N.maxDistance),f.uniforms.timer.value+=.01,FBO.particles.rotation.y-=Math.PI/180*.05,!M.any){var n=Math.PI/2;u.position.x=Math.sin(n)*Math.sin(D),u.position.y=Math.cos(n),u.position.z=Math.sin(n)*Math.cos(D)*300;var e=H,t=I*Math.PI/180,o=q.y*t,i=q.x*t;G.setFromAxisAngle(W,-o),B.setFromAxisAngle(U,-i),G.multiply(B),u.position.applyQuaternion(G),u.position.multiplyScalar(e),T.set(0,0,0),u.lookAt(T),P.style({aspect:w/E,aspectCorrection:!0,scale:2,offset:[.2*i,-.2*o],grainScale:1.5/Math.min(w,E)})}FBO.update(),d.render(p,u),K.end()}function x(n){var e=z,t=z+1;e>=b.length?(t=(e=0)+1,z=0):t>=b.length&&(e=z,t=0),z++,f.uniforms.textureA.value=b[e],f.uniforms.textureB.value=b[t],n&&TweenMax.to(FBO.particles.rotation,N.transitionDuration,{y:0,overwrite:"all"}),TweenMax.fromTo(N,N.transitionDuration,{transition:0},{transition:1,onStart:function(){j=!0},onUpdate:function(n){Y.progress(n.progress())},onComplete:function(){j=!1},onUpdateParams:["{self}"],overwrite:"all"})}var p,u,d,f,m,y,g,h,b,z,w,E,T,P,A,S=n("./bg"),M=n("ismobilejs"),C=n("glslify"),R=C(["#define GLSLIFY 1\n#define GLSLIFY 1\nuniform float alpha;\n\nvarying float a;\n\n//varying float size;\n\nvoid main()\n{\n//    if (a < 0.5) discard;\n\n    gl_FragColor = vec4(vec3(1.0), a * alpha);\n}"]),F=C(["#define GLSLIFY 1\n#define GLSLIFY 1\n//float texture containing the positions of each particle\nuniform sampler2D positionsTexture;\nuniform float alpha;\n\nvarying float a;\nuniform float pointSize;\n\n//varying float size;\n\nvoid main() {\n\n    //the mesh is a normalized square so the uvs = the xy positions of the vertices\n        vec4 pos = texture2D(positionsTexture, position.xy).xyzw;\n\n        a = pos.w;\n\n        //pos now contains the position of a point in space taht can be transformed\n        gl_Position = projectionMatrix * modelViewMatrix * pos;\n\n        //size\n        gl_PointSize = pointSize;\n//        gl_PointSize = max( 1., ( step( 1. - ( 1. / 512. ), position.x ) ) * pointSize );\n}"]),_=C(["#define GLSLIFY 1\n#define GLSLIFY 1\n// simulation\nuniform sampler2D textureA;\nuniform sampler2D textureB;\nuniform float transition;\nvarying vec2 vUv;\n\n// Nnoise related uniforms\nuniform float timer;\nuniform float frequency;\nuniform float amplitude;\nuniform float maxDistance;\n\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat noise(vec2 v)\n{\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvec3 curl(float\tx,\tfloat\ty,\tfloat\tz)\n{\n\n    float\teps\t= 1., eps2 = 2. * eps;\n    float\tn1,\tn2,\ta,\tb;\n\n    x += timer * .05;\n    y += timer * .05;\n    z += timer * .05;\n\n    vec3\tcurl = vec3(0.);\n\n    n1\t=\tnoise(vec2( x,\ty\t+\teps ));\n    n2\t=\tnoise(vec2( x,\ty\t-\teps ));\n    a\t=\t(n1\t-\tn2)/eps2;\n\n    n1\t=\tnoise(vec2( x,\tz\t+\teps));\n    n2\t=\tnoise(vec2( x,\tz\t-\teps));\n    b\t=\t(n1\t-\tn2)/eps2;\n\n    curl.x\t=\ta\t-\tb;\n\n    n1\t=\tnoise(vec2( y,\tz\t+\teps));\n    n2\t=\tnoise(vec2( y,\tz\t-\teps));\n    a\t=\t(n1\t-\tn2)/eps2;\n\n    n1\t=\tnoise(vec2( x\t+\teps,\tz));\n    n2\t=\tnoise(vec2( x\t+\teps,\tz));\n    b\t=\t(n1\t-\tn2)/eps2;\n\n    curl.y\t=\ta\t-\tb;\n\n    n1\t=\tnoise(vec2( x\t+\teps,\ty));\n    n2\t=\tnoise(vec2( x\t-\teps,\ty));\n    a\t=\t(n1\t-\tn2)/eps2;\n\n    n1\t=\tnoise(vec2(  y\t+\teps,\tz));\n    n2\t=\tnoise(vec2(  y\t-\teps,\tz));\n    b\t=\t(n1\t-\tn2)/eps2;\n\n    curl.z\t=\ta\t-\tb;\n\n    return\tcurl;\n}\n\n//vec4 lerp3(vec4 a, vec4 b, vec4 c, float s)\n//{\n//    vec4 first = vec4(a + (b - a) * s);\n//    return vec4(first + (c - first) * s);\n//}\n\nvoid main() {\n    //origin\n    vec4 t1  = texture2D( textureA, vUv ).xyzw;\n\n    //destination\n    vec4 t2 = texture2D( textureB, vUv ).xyzw;\n\n    //lerp\n    vec4 morph = mix( t1, t2, transition );\n\n    // Get position and alpha\n    vec3 pos = morph.xyz;\n    float alpha = morph.w;\n\n    vec3 tar = pos + curl( pos.x * frequency, pos.y * frequency, pos.z * frequency ) * amplitude;\n\n    float d = length( pos-tar ) / maxDistance;\n    pos = mix( pos, tar, pow( d, 5. ) );\n\n    gl_FragColor = vec4( pos, alpha );\n\n}"]),L=C(["#define GLSLIFY 1\n#define GLSLIFY 1\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = vec2(uv.x, uv.y);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}"]),H=1.75,D=0*Math.PI/180,I=40,q=new THREE.Vector2,G=new THREE.Quaternion,B=new THREE.Quaternion,W=new THREE.Vector3(1,0,0),U=new THREE.Vector3(0,1,0),O=256,j=!1,N={transition:0,amplitude:0,frequency:.01,maxDistance:48,interval:5,transitionDuration:3},V=new dat.GUI({autoPlace:!1});V.add(N,"amplitude",0,20).listen(),V.add(N,"transitionDuration",1,20).step(1).listen().onChange(function(n){N.interval=n+2}),document.getElementById("ui").appendChild(V.domElement);var K=new Stats;K.showPanel(0),K.dom.id="stats",document.getElementById("ui").appendChild(K.dom),Math.cbrt=Math.cbrt||function(n){var e=Math.pow(Math.abs(n),1/3);return n<0?-e:e};var Y=new TimelineMax({paused:!0}),k={maxDistance:36,frequency:.01},Q={maxDistance:20,frequency:.035};Y.fromTo(N,N.transitionDuration,Q,k),Y.to(N,N.transitionDuration,Q),window.onload=function(){s()}},{"./bg":3,glslify:1,ismobilejs:2}]},{},[4]);
